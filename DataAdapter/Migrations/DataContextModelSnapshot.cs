// <auto-generated />
using System;
using DataAdapter;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAdapter.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Models.Database.CookieModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<double>("BalanceToUser")
                        .HasColumnType("double")
                        .HasColumnName("balance_to_user");

                    b.Property<string>("Category")
                        .HasColumnType("longtext")
                        .HasColumnName("category");

                    b.Property<string>("FileLink")
                        .HasColumnType("longtext")
                        .HasColumnName("file_link");

                    b.Property<string>("Filesize")
                        .HasColumnType("longtext")
                        .HasColumnName("filesize");

                    b.Property<string>("FolderPath")
                        .HasColumnType("longtext")
                        .HasColumnName("folder_path");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Unit")
                        .HasColumnType("longtext")
                        .HasColumnName("unit");

                    b.Property<long>("UploadedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("uploaded_by_user_id");

                    b.Property<string>("UploadedByUsername")
                        .HasColumnType("longtext")
                        .HasColumnName("uploaded_by_username");

                    b.Property<DateTime>("UploadedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("uploaded_date_time");

                    b.Property<double>("ValidFound")
                        .HasColumnType("double")
                        .HasColumnName("valid_found");

                    b.HasKey("Id");

                    b.ToTable("cookies");
                });

            modelBuilder.Entity("Models.Database.CpanelWhmCheckModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<TimeSpan>("CheckingTimeEllapsed")
                        .HasColumnType("time(6)")
                        .HasColumnName("checking_time");

                    b.Property<int>("CpanelBadCount")
                        .HasColumnType("int")
                        .HasColumnName("cpanel_bad_count");

                    b.Property<int>("CpanelBadCountManual")
                        .HasColumnType("int")
                        .HasColumnName("cpanel_bad_count_manual");

                    b.Property<string>("CpanelBadFilePath")
                        .HasColumnType("longtext")
                        .HasColumnName("cpanel_bad_file_path");

                    b.Property<int>("CpanelGoodCount")
                        .HasColumnType("int")
                        .HasColumnName("cpanel_good_count");

                    b.Property<int>("CpanelGoodCountManual")
                        .HasColumnType("int")
                        .HasColumnName("cpanel_good_count_manual");

                    b.Property<string>("CpanelGoodFilePath")
                        .HasColumnType("longtext")
                        .HasColumnName("cpanel_good_file_path");

                    b.Property<string>("DublicateFilePath")
                        .HasColumnType("longtext")
                        .HasColumnName("dublicate_file_path");

                    b.Property<int>("DublicateFoundedCount")
                        .HasColumnType("int")
                        .HasColumnName("dublicate_founded_count");

                    b.Property<int>("DublicateFoundedCountManual")
                        .HasColumnType("int")
                        .HasColumnName("dublicate_founded_count_manual");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_at");

                    b.Property<long>("FromUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("from_user_id");

                    b.Property<string>("FromUsername")
                        .HasColumnType("longtext")
                        .HasColumnName("from_username");

                    b.Property<bool>("IsManualCheckEnd")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_manual_check_end");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_at");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("WebmailFilePath")
                        .HasColumnType("longtext")
                        .HasColumnName("webmail_file_path");

                    b.Property<int>("WebmailFoundedCount")
                        .HasColumnType("int")
                        .HasColumnName("webmail_founded_count");

                    b.Property<int>("WebmailFoundedCountManual")
                        .HasColumnType("int")
                        .HasColumnName("webmail_founded_count_manual");

                    b.Property<int>("WhmBadCount")
                        .HasColumnType("int")
                        .HasColumnName("whm_bad_count");

                    b.Property<int>("WhmBadCountManual")
                        .HasColumnType("int")
                        .HasColumnName("whm_bad_count_manual");

                    b.Property<string>("WhmBadFilePath")
                        .HasColumnType("longtext")
                        .HasColumnName("whm_bad_file_path");

                    b.Property<int>("WhmGoodCount")
                        .HasColumnType("int")
                        .HasColumnName("whm_good_count");

                    b.Property<int>("WhmGoodCountManual")
                        .HasColumnType("int")
                        .HasColumnName("whm_good_count_manual");

                    b.Property<string>("WhmGoodFilePath")
                        .HasColumnType("longtext")
                        .HasColumnName("whm_good_file_path");

                    b.HasKey("Id");

                    b.ToTable("cpanel_whm_checks");
                });

            modelBuilder.Entity("Models.Database.DublicateModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .HasColumnType("longtext")
                        .HasColumnName("category");

                    b.Property<string>("Login")
                        .HasColumnType("longtext")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<long>("UploadedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("uploaded_by_user_id");

                    b.Property<string>("UploadedByUsername")
                        .HasColumnType("longtext")
                        .HasColumnName("uploaded_by_username");

                    b.Property<string>("Url")
                        .HasColumnType("longtext")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.ToTable("dublicates");
                });

            modelBuilder.Entity("Models.Database.PayoutModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Ammount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<long>("FromUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("from_user_id");

                    b.Property<string>("FromUsername")
                        .HasColumnType("longtext")
                        .HasColumnName("from_username");

                    b.Property<string>("Method")
                        .HasColumnType("longtext")
                        .HasColumnName("method");

                    b.Property<string>("Requisites")
                        .HasColumnType("longtext")
                        .HasColumnName("requisites");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_at");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("payouts");
                });

            modelBuilder.Entity("Models.Database.UserModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<double>("Balance")
                        .HasColumnType("double")
                        .HasColumnName("balance");

                    b.Property<string>("BanReason")
                        .HasColumnType("longtext")
                        .HasColumnName("ban_reason");

                    b.Property<string>("Firstname")
                        .HasColumnType("longtext")
                        .HasColumnName("firstname");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_accepted");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_banned");

                    b.Property<string>("Language")
                        .HasColumnType("longtext")
                        .HasColumnName("lang");

                    b.Property<string>("Lastname")
                        .HasColumnType("longtext")
                        .HasColumnName("lastname");

                    b.Property<int>("LogsUploaded")
                        .HasColumnType("int")
                        .HasColumnName("logs_uploaded_count");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("registered_at");

                    b.Property<string>("Username")
                        .HasColumnType("longtext")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Models.Database.ValidModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .HasColumnType("longtext")
                        .HasColumnName("category");

                    b.Property<string>("Data")
                        .HasColumnType("longtext")
                        .HasColumnName("data");

                    b.Property<long>("UploadedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("uploaded_by_user_id");

                    b.Property<string>("UploadedByUsername")
                        .HasColumnType("longtext")
                        .HasColumnName("uploaded_by_username");

                    b.HasKey("Id");

                    b.ToTable("valid");
                });
#pragma warning restore 612, 618
        }
    }
}
